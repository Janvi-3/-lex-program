STEP1 : palindrome.y (Yacc)

%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

extern int yylex();
void yyerror(const char *s);

char input[100];
int index = 0;

int is_palindrome(const char *str) {
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        if (str[i] != str[len - i - 1]) return 0;
    }
    return 1;
}
%}

%token LETTER

%%
start:
      string {
          input[index] = '\0';
          if (is_palindrome(input))
              printf("It's a palindrome!\n");
          else
              printf("Not a palindrome.\n");
      }
    ;

string:
      string LETTER {
          input[index++] = yytext[0];
      }
    | LETTER {
          input[index++] = yytext[0];
      }
    ;
%%

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}



STEP2  palindrome.l (Lex)


%{
#include "y.tab.h"
%}

%%
[a-zA-Z]  { return LETTER; }
[\n]      { return 0; }  // End of input
.         ;              // Ignore other characters
%%

