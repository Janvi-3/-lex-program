STEP1 Lex File: expr.l

%{
#include "y.tab.h"
#include <stdio.h>
%}

%%
[0-9]+     { yylval = atoi(yytext); return NUMBER; }
[+\-*/()]  { return yytext[0]; }
[ \t\n]    ;  // ignore whitespace
.          { printf("Invalid character: %s\n", yytext); }
%%
int yywrap() {
    return 1;
}

 STEP 2 Yacc File: expr.y

%{
#include <stdio.h>
#include <stdlib.h>
%}

%token NUMBER

%%
expr: expr '+' expr    { $$ = $1 + $3; }
    | expr '-' expr    { $$ = $1 - $3; }
    | expr '*' expr    { $$ = $1 * $3; }
    | expr '/' expr    { 
                          if ($3 == 0) {
                              printf("Error: Division by zero\n");
                              exit(1);
                          }
                          $$ = $1 / $3;
                        }
    | '(' expr ')'     { $$ = $2; }
    | NUMBER           { $$ = $1; }
    ;

%%
int main() {
    printf("Enter an arithmetic expression:\n");
    yyparse();
    return 0;
}

int yyerror(const char *s) {
    printf("Parse error: %s\n", s);
    return 0;
}
